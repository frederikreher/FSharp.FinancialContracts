<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.FinancialContracts</name></assembly>
<members>
<member name="T:FSharp.FinancialContracts.Environment.NumberObs">
 <summary> Observable of type float. </summary>
</member>
<member name="T:FSharp.FinancialContracts.Environment.BoolObs">
 <summary> Observable of type boolean. </summary>
</member>
<member name="T:FSharp.FinancialContracts.Environment.Environment">
 <summary> Environment contains the value of observables for all times and the current time. </summary>
</member>
<member name="T:FSharp.FinancialContracts.Environment.Time">
 <summary> Type representing time. </summary>
</member>
<member name="M:FSharp.FinancialContracts.Environment.numberObs(FSharp.FinancialContracts.Environment.NumberObs,Microsoft.FSharp.Collections.FSharpList{FSharp.FinancialContracts.Environment.BoolObs},Microsoft.FSharp.Collections.FSharpList{FSharp.FinancialContracts.Environment.NumberObs})">
 <summary> Identifies the observables, that the provided numerical observable depends on. </summary>
 <param name="obs"> The observable to find dependent observables for. </param>
 <param name="boolAcc"> Accumulator for dependent boolean observables. </param>
 <param name="numAcc"> Accumulator for dependent numerical observables. </param>
 <returns>
 A tuple containing two list, one for all dependent boolean observables
 and one for dependent numerical observables.
 </returns>
</member>
<member name="M:FSharp.FinancialContracts.Environment.boolObs(FSharp.FinancialContracts.Environment.BoolObs,Microsoft.FSharp.Collections.FSharpList{FSharp.FinancialContracts.Environment.BoolObs},Microsoft.FSharp.Collections.FSharpList{FSharp.FinancialContracts.Environment.NumberObs})">
 <summary> Identifies the observables, that the provided boolean observable depends on. </summary>
 <param name="obs"> The observable to find dependent observables for. </param>
 <param name="boolAcc"> Accumulator for dependent boolean observables. </param>
 <param name="numAcc"> Accumulator for dependent numerical observables. </param>
 <returns> 
 A tuple containing two list, one for all dependent boolean observables
 and one for dependent numerical observables.
 </returns>
</member>
<member name="M:FSharp.FinancialContracts.Environment.evalNumberObs(FSharp.FinancialContracts.Environment.NumberObs,System.Int32,System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Boolean}[],Microsoft.FSharp.Collections.FSharpMap{System.String,System.Double}[]})">
 <summary> Evaluation of boolean observable, returns a boolean value. </summary>
 <param name="obs"> The observable to evaluate. </param>
 <param name="t"> Determines the point in time where the value of NumVal objects will be looked up. </param>
 <param name="env"> Environment for numerical values, used to look up NumVal objects. </par
 <returns> A float value representing the value of the evaluated observable. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Environment.evalBoolObs(FSharp.FinancialContracts.Environment.BoolObs,System.Int32,System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Boolean}[],Microsoft.FSharp.Collections.FSharpMap{System.String,System.Double}[]})">
 <summary> Evaluation of boolean observable, returns a boolean value. </summary>
 <param name="obs"> The observable to evaluate. </param>
 <param name="t"> Determines the point in time where the value of BoolVal objects will be looked up. </param>
 <param name="env"> Environment for boolean values, used to look up BoolVal objects. </param>
 <returns> A boolean value representing the value of the evaluated observable. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Environment.addNumObs(FSharp.FinancialContracts.Environment.NumberObs,System.Double,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Double})">
 <summary> Add a float observable to the map of numerical observables. </summary>
 <param name="(numObs, value)"> The tuple of a numerical observables and a float value, to add to the map. </param>
 <param name="numEnv"> The map of numerical observables to extend. </param>
 <returns> The updated map of numerical observables. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Environment.addBoolObs(FSharp.FinancialContracts.Environment.BoolObs,System.Boolean,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Boolean})">
 <summary> Add a boolean observable to the map of boolean observables. </summary>
 <param name="(boolObs, bool)"> The tuple of a boolean observables and a boolean value, to add to the map. </param>
 <param name="boolEnv"> The map of boolean observables to extend. </param>
 <returns> The updated map of boolean observables. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Environment.getNumEnv(System.Int32,System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Boolean}[],Microsoft.FSharp.Collections.FSharpMap{System.String,System.Double}[]})">
 <summary> Get the map of numerical observables in an Environment at a specific point in time. </summary>
 <param name="t"> The time to get the map at. </param>
 <param name="env"> The Environment to get the map of observables from. </param>
 <returns> The map of numerical observables at the specific point in time. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Environment.getBoolEnv(System.Int32,System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Boolean}[],Microsoft.FSharp.Collections.FSharpMap{System.String,System.Double}[]})">
 <summary> Get the map of boolean observables in an Environment at a specific point in time. </summary>
 <param name="t"> The time to get the map at. </param>
 <param name="env"> The Environment to get the map of observables from. </param>
 <returns> The map of boolean observables at the specific point in time. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Environment.getTime(System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Boolean}[],Microsoft.FSharp.Collections.FSharpMap{System.String,System.Double}[]})">
 <summary> Get the current time of an Environment. </summary>
 <param name="env"> The Environment to get the time of. </param>
 <returns> The current time of the Environment. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Environment.increaseTime(System.Int32,System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Boolean}[],Microsoft.FSharp.Collections.FSharpMap{System.String,System.Double}[]})">
 <summary> Pass the time of an Environment. </summary>
 <param name="t1"> The time that the current time of the Environment should be increased. </param>
 <param name="env"> The Environment to increase the time of. </param>
 <returns> The Environment with an updated current time. </returns>
</member>
<member name="T:FSharp.FinancialContracts.Contract.Contract">
 <summary> Defines how a contract can be constructed. </summary>
</member>
<member name="T:FSharp.FinancialContracts.Contract.Transaction">
 <summary> Evaluation of a contract result in a Transaction. </summary>
</member>
<member name="T:FSharp.FinancialContracts.Contract.Asset">
 <summary> Used in contracts to create transactions. </summary>
</member>
<member name="T:FSharp.FinancialContracts.Contract.Measure">
 <summary> Used to specify the measurement type of a commodity. </summary>
</member>
<member name="T:FSharp.FinancialContracts.Contract.Commodity">
 <summary> Commodity used in an asset. </summary>
</member>
<member name="T:FSharp.FinancialContracts.Contract.Currency">
 <summary> Currency used in an asset. </summary>
</member>
<member name="M:FSharp.FinancialContracts.Contract.evalC(System.Tuple{System.Int32,Microsoft.FSharp.Collections.FSharpMap{System.String,System.Boolean}[],Microsoft.FSharp.Collections.FSharpMap{System.String,System.Double}[]},FSharp.FinancialContracts.Contract.Contract)">
 <summary> Evaluates a contract. </summary>
 <param name="env"> The Environment to evaluate the contract in. </param>
 <param name="contract"> The contract to evaluate. </param>
 <returns> Returns an array of list of Transactions. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Contract.getObservables(FSharp.FinancialContracts.Contract.Contract)">
 <summary> Identifies all the  observables in a contract. </summary>
 <param name="c"> The contract to isolate observables for. </param>
 <returns> 
 Returns a tuple of BoolObs list and NumberObs list, 
 containing the observables needed to evaluate all elements of a contract. 
 </returns>
</member>
<member name="M:FSharp.FinancialContracts.Contract.getHorizon(FSharp.FinancialContracts.Contract.Contract)">
 <summary> Finds the horizon of a contract. </summary>
 <param name="c"> The contract to find a horizon for. </param>
 <returns> 
 A Time object representing the point in time needed to ensure that all elements 
 of a contract can be evaluated.
 </returns>
</member>
<member name="M:FSharp.FinancialContracts.Contract.getExchangeRate(FSharp.FinancialContracts.Contract.Currency,FSharp.FinancialContracts.Contract.Currency)">
 <summary> Provides the current exchange rate between two currencies. </summary>
 <param name="cur1"> The currency to exchange from. </param>
 <param name="cur2"> The currency to exchange to. </param>
 <returns> A float value representing the exchange rate between the two currencies. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Contracts.asian(FSharp.FinancialContracts.Environment.BoolObs,FSharp.FinancialContracts.Environment.NumberObs,System.Int32,System.Int32,FSharp.FinancialContracts.Contract.Contract)">
 <summary> European option using an observable. </summary>
 <param name="boolObs"> The observable that determines if contract should be evaluated. </param>
 <param name="numObs"> The observable to get the average of. </param>
 <param name="time"> The time at which the contract can be evaluated. </param>
 <param name="obsPeriod"> The length of the period used to determine the average of numObs. </param>
 <param name="c"> The contract to include in the option. </param>
 <returns> A contract matching the rules of an asian option. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Contracts.european(FSharp.FinancialContracts.Environment.BoolObs,System.Int32,FSharp.FinancialContracts.Contract.Contract)">
 <summary> European option using an observable. </summary>
 <param name="boolObs"> The observable that determines if contract should be evaluated. </param>
 <param name="time"> The time at which the contract can be evaluated. </param>
 <param name="c"> The contract to include in the option. </param>
 <returns> A contract matching the rules of an european option. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Contracts.american(FSharp.FinancialContracts.Environment.BoolObs,System.Int32,FSharp.FinancialContracts.Contract.Contract)">
 <summary> American option using an observable. </summary>
 <param name="boolObs"> The observable that determines if contract should be evaluated. </param>
 <param name="time"> The latest time at which the contract can be evaluated. </param>
 <param name="c"> The contract to include in the option. </param>
 <returns> A contract matching the rules of an american option. </returns>
</member>
<member name="M:FSharp.FinancialContracts.Contracts.zcb(System.Int32,FSharp.FinancialContracts.Environment.NumberObs,FSharp.FinancialContracts.Contract.Asset)">
 <summary> Zero-coupon discount bond using an observable. </summary>
 <param name="time"> The time at which the contract can be evaluated. </param>
 <param name="obs"> The amount in a transaction specified using an observable. </param>
 <param name="asset"> The asset used in an transaction. </param>
 <returns> ... </returns>
</member>
</members>
</doc>
